// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               v3.20.3
// source: products.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "products";

export interface FindProductRequest {
  productId: string;
}

export interface Product {
  productId: string;
  name: string;
  description: string;
  price: number;
  availableQuantity: number;
}

export interface CreateProductRequest {
  name: string;
  description: string;
  price: number;
  availableQuantity: number;
}

export interface UpdateProductRequest {
  productId: string;
  name: string;
  description: string;
  price: number;
  availableQuantity: number;
}

export interface ListProductsRequest {
  ids: string[];
}

export interface ListProductsResponse {
  products: Product[];
}

export const PRODUCTS_PACKAGE_NAME = "products";

export interface ProductsServiceClient {
  getProduct(request: FindProductRequest): Observable<Product>;

  createProduct(request: CreateProductRequest): Observable<Product>;

  updateProduct(request: UpdateProductRequest): Observable<Product>;

  deleteProduct(request: FindProductRequest): Observable<Product>;

  listProducts(request: ListProductsRequest): Observable<ListProductsResponse>;
}

export interface ProductsServiceController {
  getProduct(request: FindProductRequest): Promise<Product> | Observable<Product> | Product;

  createProduct(request: CreateProductRequest): Promise<Product> | Observable<Product> | Product;

  updateProduct(request: UpdateProductRequest): Promise<Product> | Observable<Product> | Product;

  deleteProduct(request: FindProductRequest): Promise<Product> | Observable<Product> | Product;

  listProducts(
    request: ListProductsRequest,
  ): Promise<ListProductsResponse> | Observable<ListProductsResponse> | ListProductsResponse;
}

export function ProductsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getProduct", "createProduct", "updateProduct", "deleteProduct", "listProducts"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCTS_SERVICE_NAME = "ProductsService";
